{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":150545,"sourceType":"datasetVersion","datasetId":70909},{"sourceId":576103,"sourceType":"datasetVersion","datasetId":278761}],"dockerImageVersionId":28755,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Plant Disease Using Siamese Network - Keras","metadata":{}},{"cell_type":"markdown","source":"We will understand the siamese network by building the plant disease model. The objective of our network is to understand whether two plants are similar or dissimilar.\n\nOnce we have our data as pairs along with their labels, we train our siamese network. From the image pair, we feed one image to the network A and another image to the network B. The role of these two networks is only to extract the feature vectors. So, we use two convolution layers with relu activations for extracting the features. Once we have learned the feature, we feed the resultant feature vector from both of the networks to the energy function which measures the similarity, we use Euclidean distance as our energy function. So, we train our network by feeding the image pair to learn the semantic similarity between them.\n\n**What is Siamese Neural Network?**\n\nSiamese Neural Network is a special type of neural network in first we train an image with a sequence of convolutional layers, pooling layers and fully connected layers we end up with a feature vector f(x1).\nThen we train another image in the same sequence to get another feature vector f(x2). Now we compute d which will be the distance between each of the points in feature vector f(x1) with the feature vector f(x2).\nIf d is small we can tell both images are same else if d is large itâ€™s the other way round.\n\n![Fig 1: A Siamese Neural Network for Image Recognition](https://miro.medium.com/max/1068/1*V27gq7s7elBc8G52T8t1LQ.png)\n\n\n**One-shot Image Recognition**\n\nPeople may ask why have they used One-shot image recognition method though there are other state of art models like CNN and Hierarchical Bayesian Program Learning. The main reason for people using this method is the lack of data. The state of art Machine Learning Algorithms work very well when there is a huge amount of data but can fail miserably if there is a data scarcity.\n\nIn this method the model must make the correct prediction given only one example in each class in the training set. In this paper however the author has used more than one example for each class but it is very less compared to what the state of art algorithm requires.\n","metadata":{}},{"cell_type":"markdown","source":"References :\n* https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/02.%20Face%20and%20Audio%20Recognition%20using%20Siamese%20Networks/2.4%20Face%20Recognition%20Using%20Siamese%20Network.ipynb\n* https://keras.io/examples/mnist_siamese/\n* https://msiam.github.io/Few-Shot-Learning/\n* https://towardsdatascience.com/one-shot-learning-with-siamese-networks-using-keras-17f34e75bb3d\n* https://medium.com/@subham.tiwari186/siamese-neural-network-for-one-shot-image-recognition-paper-analysis-44cf7f0c66cb\n* https://www.katnoria.com/siamese-one-shot/\n* https://sorenbouma.github.io/blog/oneshot/","metadata":{}},{"cell_type":"code","source":"import re\nimport numpy as np\nfrom PIL import Image\n\nfrom sklearn.model_selection import train_test_split\nfrom keras import backend as K\nfrom keras.layers import Activation\nfrom keras.layers import Input, Lambda, Dense, Dropout, Convolution2D, MaxPooling2D, Flatten\nfrom keras.models import Sequential, Model\nfrom keras.optimizers import RMSprop\nfrom keras import optimizers\n\nimport matplotlib.image as mpimg \nimport matplotlib.pyplot as plt \n\nfrom keras import callbacks\nfrom keras.callbacks import ModelCheckpoint, LearningRateScheduler, EarlyStopping, ReduceLROnPlateau, TensorBoard\nimport os\nfrom keras.models import Model,load_model\nimport json\nfrom keras.models import model_from_json, load_model\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2024-08-08T02:49:26.073984Z","iopub.execute_input":"2024-08-08T02:49:26.074372Z","iopub.status.idle":"2024-08-08T02:49:29.800412Z","shell.execute_reply.started":"2024-08-08T02:49:26.074317Z","shell.execute_reply":"2024-08-08T02:49:29.799319Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stderr","text":"Using TensorFlow backend.\n","output_type":"stream"}]},{"cell_type":"code","source":"selected_image_size = 224\nresize = True\ntotal_sample_size = 10000 # 5k-50k\n\nchannel = 1\nsize = 2\n\nfolder_count = 38\nimage_count = 20 #0-50\n\nif resize == True:\n    batch_size=256\nelse:\n    batch_size=64\n\npath =  os.path.join('../input/plantvillage/plantvillage_resize_224/PlantVillage_resize_224/')\nprint(path)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T02:49:34.421290Z","iopub.execute_input":"2024-08-08T02:49:34.421738Z","iopub.status.idle":"2024-08-08T02:49:34.430360Z","shell.execute_reply.started":"2024-08-08T02:49:34.421659Z","shell.execute_reply":"2024-08-08T02:49:34.429211Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"../input/plantvillage/plantvillage_resize_224/PlantVillage_resize_224/\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Now, we define a function for reading our input image. The function read_image takes input as an image and returns the numpy array.\nThese feat_vecs_a and feat_vecs_b are the feature vectors of our image pair. Next, we feed this feature vectors to the energy function to compute the distance between them, we use Euclidean distance as our energy function. Next, we define our loss function as contrastive_loss function and compile the model.","metadata":{}},{"cell_type":"code","source":"def read_image(filename, byteorder='>'):\n    \n    #first we read the image, as a raw file to the buffer\n    with open(filename, 'rb') as f:\n        buffer = f.read()\n    \n    #using regex, we extract the header, width, height and maxval of the image\n    header, width, height, maxval = re.search(\n        b\"(^P5\\s(?:\\s*#.*[\\r\\n])*\"\n        b\"(\\d+)\\s(?:\\s*#.*[\\r\\n])*\"\n        b\"(\\d+)\\s(?:\\s*#.*[\\r\\n])*\"\n        b\"(\\d+)\\s(?:\\s*#.*[\\r\\n]\\s)*)\", buffer).groups()\n    \n    #then we convert the image to numpy array using np.frombuffer which interprets buffer as one dimensional array\n    return np.frombuffer(buffer,\n                            dtype='u1' if int(maxval) < 256 else byteorder+'u2',\n                            count=int(width)*int(height),\n                            offset=len(header)\n                            ).reshape((int(height), int(width)))\n\n\ndef euclidean_distance(vects):\n    x, y = vects\n    return K.sqrt(K.sum(K.square(x - y), axis=1, keepdims=True))\n\n\ndef eucl_dist_output_shape(shapes):\n    shape1, shape2 = shapes\n    return (shape1[0], 1)\n\ndef contrastive_loss(y_true, y_pred):\n    margin = 1\n    return K.mean(y_true * K.square(y_pred) + (1 - y_true) * K.square(K.maximum(margin - y_pred, 0)))\n\ndef compute_accuracy(predictions, labels):\n    '''Compute classification accuracy with a fixed threshold on distances.\n    '''\n    return labels[predictions.ravel() < 0.5].mean()\n\ndef accuracy(y_true, y_pred):\n    '''Compute classification accuracy with a fixed threshold on distances.\n    '''\n    return K.mean(K.equal(y_true, K.cast(y_pred < 0.5, y_true.dtype)))","metadata":{"execution":{"iopub.status.busy":"2024-08-08T02:49:35.252031Z","iopub.execute_input":"2024-08-08T02:49:35.252416Z","iopub.status.idle":"2024-08-08T02:49:35.269700Z","shell.execute_reply.started":"2024-08-08T02:49:35.252362Z","shell.execute_reply":"2024-08-08T02:49:35.268576Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"For an example, Let us open one image,","metadata":{}},{"cell_type":"code","source":"Image.open(path+'s1/1.jpg')","metadata":{"execution":{"iopub.status.busy":"2024-08-08T02:49:35.934022Z","iopub.execute_input":"2024-08-08T02:49:35.934401Z","iopub.status.idle":"2024-08-08T02:49:36.007090Z","shell.execute_reply.started":"2024-08-08T02:49:35.934347Z","shell.execute_reply":"2024-08-08T02:49:36.006065Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"<PIL.JpegImagePlugin.JpegImageFile image mode=L size=224x224 at 0x7ED7CB5FC1D0>","image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":"image = mpimg.imread(path+'s1/1.jpg')\ndim1 = image.shape[0]\nprint('dim1',dim1)\ndim2 = image.shape[1]\nprint('dim2',dim2)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T02:49:36.260666Z","iopub.execute_input":"2024-08-08T02:49:36.261020Z","iopub.status.idle":"2024-08-08T02:49:36.270938Z","shell.execute_reply.started":"2024-08-08T02:49:36.260969Z","shell.execute_reply":"2024-08-08T02:49:36.269529Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"dim1 224\ndim2 224\n","output_type":"stream"}]},{"cell_type":"code","source":"image.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-08T02:49:36.547826Z","iopub.execute_input":"2024-08-08T02:49:36.548314Z","iopub.status.idle":"2024-08-08T02:49:36.554706Z","shell.execute_reply.started":"2024-08-08T02:49:36.548193Z","shell.execute_reply":"2024-08-08T02:49:36.553479Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"(224, 224)"},"metadata":{}}]},{"cell_type":"markdown","source":"Now, we define another function get_data for generating our data. As we know, for the Siamese network, data should be in the form of pairs (genuine and imposite) with a binary label.\n\nFirst, we read the images (img1, img2) from the same directory and store them in the x_genuine_pair array and assign y_genuine to 1. Next, we read the images (img1, img2) from the different directory and store them in the x_imposite pair and assign y_imposite to 0.\n\nFinally, we concatenate both x_genuine_pair, x_imposite to X and y_genuine, y_imposite to Y:","metadata":{}},{"cell_type":"markdown","source":"# To prepare the data","metadata":{}},{"cell_type":"code","source":"def get_data(size, total_sample_size):\n    #read the image\n    image = mpimg.imread(path+'s' + str(1) + '/' + str(1) + '.jpg', 'rw+')\n    #reduce the size\n    if resize == True:\n        image = image[::size, ::size]\n    #get the new size\n    dim1 = image.shape[0]\n    dim2 = image.shape[1]\n\n    count = 0\n\n    #initialize the numpy array with the shape of [total_sample, no_of_pairs, dim1, dim2]\n    x_geuine_pair = np.zeros([total_sample_size, 2, 1, dim1, dim2])\n\n    y_genuine = np.zeros([total_sample_size,1])\n\n    for i in range(folder_count):\n        for j in range(int(total_sample_size/folder_count)):\n            ind1 = 0\n            ind2 = 0\n\n            #read images from same directory (genuine pair)\n            while ind1 == ind2:\n                ind1 = np.random.randint(image_count)\n                ind2 = np.random.randint(image_count)\n\n            # read the two images\n            img1 = mpimg.imread(path+'s' + str(i+1) + '/' + str(ind1 + 1) + '.jpg', 'rw+')\n            img2 = mpimg.imread(path+'s' + str(i+1) + '/' + str(ind2 + 1) + '.jpg', 'rw+')\n\n            #reduce the size\n            if resize == True:\n                img1 = img1[::size, ::size]\n                img2 = img2[::size, ::size]\n\n            #store the images to the initialized numpy array\n            print\n            x_geuine_pair[count, 0, 0, :, :] = img1\n            x_geuine_pair[count, 1, 0, :, :] = img2\n\n            #as we are drawing images from the same directory we assign label as 1. (genuine pair)\n            y_genuine[count] = 1\n            count += 1\n\n    count = 0\n    x_imposite_pair = np.zeros([total_sample_size, 2, 1, dim1, dim2])\n    y_imposite = np.zeros([total_sample_size, 1])\n\n    for i in range(int(total_sample_size/image_count)):\n        for j in range(image_count):\n\n            #read images from different directory (imposite pair)\n            while True:\n                ind1 = np.random.randint(folder_count)\n                ind2 = np.random.randint(folder_count)\n                if ind1 != ind2:\n                    break\n\n            img1 = mpimg.imread(path+'s' + str(ind1+1) + '/' + str(j + 1) + '.jpg', 'rw+')\n            img2 = mpimg.imread(path+'s' + str(ind2+1) + '/' + str(j + 1) + '.jpg', 'rw+')\n\n            if resize == True:\n                img1 = img1[::size, ::size]\n                img2 = img2[::size, ::size]\n\n            x_imposite_pair[count, 0, 0, :, :] = img1\n            x_imposite_pair[count, 1, 0, :, :] = img2\n            #as we are drawing images from the different directory we assign label as 0. (imposite pair)\n            y_imposite[count] = 0\n            count += 1\n\n    #now, concatenate, genuine pairs and imposite pair to get the whole data\n    #print(x_geuine_pair.shape)\n    #print(x_imposite_pair.shape)\n    X = np.concatenate([x_geuine_pair, x_imposite_pair], axis=0)/255\n    Y = np.concatenate([y_genuine, y_imposite], axis=0)\n\n    return X, Y\nX, Y = get_data(size, total_sample_size)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T02:49:37.535288Z","iopub.execute_input":"2024-08-08T02:49:37.535659Z","iopub.status.idle":"2024-08-08T02:51:19.559791Z","shell.execute_reply.started":"2024-08-08T02:49:37.535606Z","shell.execute_reply":"2024-08-08T02:51:19.558588Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":"\nNow, we generate our data and check our data size. As you can see we have 20,000 data points, out of these 10,000 are genuine pairs and 10,000 are imposite pairs.","metadata":{}},{"cell_type":"code","source":"X.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-08T02:51:19.562273Z","iopub.execute_input":"2024-08-08T02:51:19.562644Z","iopub.status.idle":"2024-08-08T02:51:19.568616Z","shell.execute_reply.started":"2024-08-08T02:51:19.562580Z","shell.execute_reply":"2024-08-08T02:51:19.567653Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"(20000, 2, 1, 112, 112)"},"metadata":{}}]},{"cell_type":"code","source":"Y.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-08T02:51:19.570539Z","iopub.execute_input":"2024-08-08T02:51:19.570982Z","iopub.status.idle":"2024-08-08T02:51:19.586744Z","shell.execute_reply.started":"2024-08-08T02:51:19.570901Z","shell.execute_reply":"2024-08-08T02:51:19.585700Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"(20000, 1)"},"metadata":{}}]},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,5))\nsns.countplot(Y[:,0])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-08T02:51:19.588442Z","iopub.execute_input":"2024-08-08T02:51:19.588781Z","iopub.status.idle":"2024-08-08T02:51:19.909916Z","shell.execute_reply.started":"2024-08-08T02:51:19.588722Z","shell.execute_reply":"2024-08-08T02:51:19.908654Z"},"trusted":true},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 720x360 with 1 Axes>","image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":"Next, we split our data for training and testing with 85% training and 15% testing proportions:","metadata":{}},{"cell_type":"code","source":"x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=.15)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T02:51:19.913049Z","iopub.execute_input":"2024-08-08T02:51:19.913378Z","iopub.status.idle":"2024-08-08T02:51:22.941512Z","shell.execute_reply.started":"2024-08-08T02:51:19.913329Z","shell.execute_reply":"2024-08-08T02:51:22.940671Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"print('x_train',x_train.shape)\nprint('x_test',x_test.shape)\nprint('y_train',y_train.shape)\nprint('y_test',y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T02:51:22.943440Z","iopub.execute_input":"2024-08-08T02:51:22.943782Z","iopub.status.idle":"2024-08-08T02:51:22.951419Z","shell.execute_reply.started":"2024-08-08T02:51:22.943721Z","shell.execute_reply":"2024-08-08T02:51:22.950300Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"x_train (17000, 2, 1, 112, 112)\nx_test (3000, 2, 1, 112, 112)\ny_train (17000, 1)\ny_test (3000, 1)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Now that, we have successfully generated our data, we build our siamese network. First, we define the base network which is basically a convolutional network used for feature extraction. We build two convolutional layers with rectified linear unit (ReLU) activations and max pooling followed by flat layer.","metadata":{}},{"cell_type":"markdown","source":"# Preparing the Network","metadata":{}},{"cell_type":"code","source":"def build_base_network(input_shape):\n    \n    seq = Sequential()\n    \n    nb_filter = [16, 32, 16]\n    kernel_size = 3\n    \n    \n    #convolutional layer 1\n    seq.add(Convolution2D(nb_filter[0], kernel_size, kernel_size, input_shape=input_shape,border_mode='valid', dim_ordering='th'))\n    seq.add(Activation('relu'))\n    seq.add(MaxPooling2D(pool_size=(2, 2)))  \n    seq.add(Dropout(.25))\n    \n    #convolutional layer 2\n    seq.add(Convolution2D(nb_filter[1], kernel_size, kernel_size, border_mode='valid', dim_ordering='th'))\n    seq.add(Activation('relu'))\n    seq.add(MaxPooling2D(pool_size=(2, 2), dim_ordering='th')) \n    seq.add(Dropout(.25))\n    \n    #convolutional layer 2\n    seq.add(Convolution2D(nb_filter[2], kernel_size, kernel_size, border_mode='valid', dim_ordering='th'))\n    seq.add(Activation('relu'))\n    seq.add(MaxPooling2D(pool_size=(2, 2), dim_ordering='th')) \n    seq.add(Dropout(.25))\n\n    #flatten \n    seq.add(Flatten())\n    seq.add(Dense(128, activation='relu'))\n    seq.add(Dropout(0.1))\n    seq.add(Dense(50, activation='relu'))\n    return seq","metadata":{"execution":{"iopub.status.busy":"2024-08-08T02:51:22.952957Z","iopub.execute_input":"2024-08-08T02:51:22.953285Z","iopub.status.idle":"2024-08-08T02:51:22.969457Z","shell.execute_reply.started":"2024-08-08T02:51:22.953234Z","shell.execute_reply":"2024-08-08T02:51:22.968236Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":"Next, we feed the image pair, to the base network, which will return the embeddings that is, feature vectors:","metadata":{}},{"cell_type":"code","source":"input_dim = x_train.shape[2:]\nimg_a = Input(shape=input_dim)\nimg_b = Input(shape=input_dim)\nprint('input_dim',input_dim)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T02:51:22.970952Z","iopub.execute_input":"2024-08-08T02:51:22.971299Z","iopub.status.idle":"2024-08-08T02:51:23.021274Z","shell.execute_reply.started":"2024-08-08T02:51:22.971247Z","shell.execute_reply":"2024-08-08T02:51:23.020195Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"input_dim (1, 112, 112)\n","output_type":"stream"}]},{"cell_type":"code","source":"base_network = build_base_network(input_dim)\nfeat_vecs_a = base_network(img_a)\nfeat_vecs_b = base_network(img_b)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T02:51:23.023016Z","iopub.execute_input":"2024-08-08T02:51:23.023484Z","iopub.status.idle":"2024-08-08T02:51:23.763579Z","shell.execute_reply.started":"2024-08-08T02:51:23.023407Z","shell.execute_reply":"2024-08-08T02:51:23.762497Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"distance = Lambda(euclidean_distance, output_shape=eucl_dist_output_shape)([feat_vecs_a, feat_vecs_b])","metadata":{"execution":{"iopub.status.busy":"2024-08-08T02:51:23.765196Z","iopub.execute_input":"2024-08-08T02:51:23.765595Z","iopub.status.idle":"2024-08-08T02:51:23.780923Z","shell.execute_reply.started":"2024-08-08T02:51:23.765527Z","shell.execute_reply":"2024-08-08T02:51:23.779621Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":"Now, we set the epoch length to 20 and we use RMS prop for optimization and define our model.","metadata":{}},{"cell_type":"code","source":"epochs = 20\nrms = optimizers.Adam(lr=0.0001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)#RMSprop()\nrms = RMSprop()\n\nearlyStopping = EarlyStopping(monitor='val_loss',\n                              min_delta=0,\n                              patience=3,\n                              verbose=1,\n                              restore_best_weights=True)\ncallback_early_stop_reduceLROnPlateau=[earlyStopping]","metadata":{"execution":{"iopub.status.busy":"2024-08-08T02:51:23.782888Z","iopub.execute_input":"2024-08-08T02:51:23.783376Z","iopub.status.idle":"2024-08-08T02:51:23.828942Z","shell.execute_reply.started":"2024-08-08T02:51:23.783288Z","shell.execute_reply":"2024-08-08T02:51:23.827790Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"model = Model(input=[img_a, img_b], output=distance)\nmodel.compile(loss=contrastive_loss, optimizer=rms,metrics=[accuracy])\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2024-08-08T02:51:23.831162Z","iopub.execute_input":"2024-08-08T02:51:23.831780Z","iopub.status.idle":"2024-08-08T02:51:23.875186Z","shell.execute_reply.started":"2024-08-08T02:51:23.831567Z","shell.execute_reply":"2024-08-08T02:51:23.873965Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"__________________________________________________________________________________________________\nLayer (type)                    Output Shape         Param #     Connected to                     \n==================================================================================================\ninput_1 (InputLayer)            (None, 1, 112, 112)  0                                            \n__________________________________________________________________________________________________\ninput_2 (InputLayer)            (None, 1, 112, 112)  0                                            \n__________________________________________________________________________________________________\nsequential_1 (Sequential)       (None, 50)           652674      input_1[0][0]                    \n                                                                 input_2[0][0]                    \n__________________________________________________________________________________________________\nlambda_1 (Lambda)               (None, 1)            0           sequential_1[1][0]               \n                                                                 sequential_1[2][0]               \n==================================================================================================\nTotal params: 652,674\nTrainable params: 652,674\nNon-trainable params: 0\n__________________________________________________________________________________________________\n","output_type":"stream"}]},{"cell_type":"code","source":"img_1 = x_train[:, 0]\nimg2 = x_train[:, 1]\nimg_1.shape\nhistory = model.fit([img_1, img2], y_train, validation_split=.20,\n      batch_size= batch_size, verbose=1, nb_epoch=epochs, callbacks=callback_early_stop_reduceLROnPlateau)\n\n# Option 1: Save Weights + Architecture\nmodel.save_weights('model_weights.h5')\nwith open('model_architecture.json', 'w') as f:\n    f.write(model.to_json())\nprint('saved')","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-08-08T02:51:23.877240Z","iopub.execute_input":"2024-08-08T02:51:23.877804Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"Train on 13600 samples, validate on 3400 samples\nEpoch 1/20\n13600/13600 [==============================] - 352s 26ms/step - loss: 0.2720 - accuracy: 0.5372 - val_loss: 0.4176 - val_accuracy: 0.5076\nEpoch 2/20\n13600/13600 [==============================] - 351s 26ms/step - loss: 0.2476 - accuracy: 0.5810 - val_loss: 0.4006 - val_accuracy: 0.5076\nEpoch 3/20\n13600/13600 [==============================] - 346s 25ms/step - loss: 0.2421 - accuracy: 0.5963 - val_loss: 0.3933 - val_accuracy: 0.5076\nEpoch 4/20\n 5888/13600 [===========>..................] - ETA: 2:58 - loss: 0.2315 - accuracy: 0.6165","output_type":"stream"}]},{"cell_type":"markdown","source":"Now, we make predictions with test data. Finally, we check our model accuracy.","metadata":{}},{"cell_type":"markdown","source":"# Predictions","metadata":{}},{"cell_type":"code","source":"pred = model.predict([x_test[:, 0], x_test[:, 1]])\n\nprint('Accuracy on test set: %0.2f%%' % (100 * compute_accuracy(pred, y_test)))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pred = model.predict([x_train[:, 0], x_train[:, 1]])\n\nprint('* Accuracy on training set: %0.2f%%' % (100  * compute_accuracy(pred, y_train)))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\n#Train and validation accuracy\nplt.plot(epochs, acc, 'b', label='Training accurarcy')\nplt.plot(epochs, val_acc, 'r', label='Validation accurarcy')\nplt.title('Training and Validation accurarcy')\nplt.legend()\n\nplt.figure()\n#Train and validation loss\nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title('Training and Validation loss')\nplt.legend()\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Test","metadata":{}},{"cell_type":"code","source":"if resize==True:\n    selected_image_size = int(selected_image_size/2)\n    print('selected_image_size',selected_image_size)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"target_label = 1\nvalues = np.array(y_test[:,0])\n\ntarget_index = values.tolist().index(target_label)\nprint(target_index)\nprint('target_index value : ',y_test[target_index])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"img1 = (x_test[target_index, 0] * 255).astype(np.uint8)\nimg1 = img1.reshape(selected_image_size,selected_image_size)\nprint(img1.shape)\nimg1\nplt.imshow(img1)\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"img2 = (x_test[target_index, 1] * 255).astype(np.uint8)\nimg2 = img2.reshape(selected_image_size,selected_image_size)\nprint(img2.shape)\nimg2\nplt.imshow(img2)\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_test[target_index:target_index+1, 0].shape","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pred = model.predict([x_test[target_index:target_index+1, 0], x_test[target_index:target_index+1, 1]])\npred = pred < 0.5\nprint('y_test[target_index]:',y_test[target_index,0]==True,' pred :',pred)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}